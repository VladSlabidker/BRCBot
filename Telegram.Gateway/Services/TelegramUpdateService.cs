using System.Text.Json;
using Common.Enums;
using Common.Exceptions;
using Grpc.Core;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using Telegram.Gateway.Interfaces;
using Telegram.Gateway.Models;

namespace Telegram.Gateway.Services;

public class TelegramUpdateService : ITelegramUpdateService
{
    private readonly ITelegramBotClient _botClient;
    private readonly IHttpClientFactory _httpFactory;
    private readonly ILogger<TelegramUpdateService> _logger;

    // –•—Ä–∞–Ω–∏–º: –∫–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–¥–µ—Ç —á–µ–∫
    private static readonly Dictionary<long, bool> _waitingForReceipt = new();

    public TelegramUpdateService(
        ITelegramBotClient botClient,
        IHttpClientFactory httpFactory,
        ILogger<TelegramUpdateService> logger)
    {
        _botClient = botClient;
        _httpFactory = httpFactory;
        _logger = logger;
    }

    public async Task HandleUpdateAsync(Update update)
    {
        if (update.Type == UpdateType.Message)
        {
            var msg = update.Message!;
            var chatId = msg.Chat.Id;

            // –ö–æ–º–∞–Ω–¥–∞ /start
            if (msg.Text == "/start")
            {
                var keyboard = new ReplyKeyboardMarkup(new[]
                {
                    new KeyboardButton[] { "üßæ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ–∫" },
                    new KeyboardButton[] { "‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ" }
                })
                {
                    ResizeKeyboard = true
                };

                await _botClient.SendMessage(chatId,
                    "–ü—Ä–∏–≤–µ—Ç!",
                    replyMarkup: keyboard);
                return;
            }

            // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ–∫"
            if (msg.Text == "üßæ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ–∫")
            {
                _waitingForReceipt[chatId] = true;

                await _botClient.SendMessage(chatId,
                    "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ —á–µ–∫–∞.");
                return;
            }

            // –ö–Ω–æ–ø–∫–∞ "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ"
            if (msg.Text == "‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ")
            {
                await _botClient.SendMessage(chatId,
                    "–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—é–¥–∞ \nüëâ @slabidker",
                    parseMode: ParseMode.Markdown);
                return;
            }

            // –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏
            if (msg.Photo != null && _waitingForReceipt.TryGetValue(chatId, out bool waiting) && waiting)
            {
                var bestPhoto = msg.Photo.OrderByDescending(p => p.FileSize).First();
                var file = await _botClient.GetFile(bestPhoto.FileId);

                using var memoryStream = new MemoryStream();
                await _botClient.DownloadFile(file.FilePath!, memoryStream);
                memoryStream.Seek(0, SeekOrigin.Begin);

                var bytes = memoryStream.ToArray();

                try
                {
                    var client = _httpFactory.CreateClient("Storefront");
                    var content = JsonContent.Create(bytes);

                    var response = await client.PostAsync("api/validation", content);
                    var body = await response.Content.ReadAsStringAsync();

                    var result = JsonSerializer.Deserialize<Receipt>(body, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                    if (result.IsValid)
                    {
                        var checkedAt = DateTimeOffset.FromUnixTimeSeconds(result.CheckedAt.Seconds).ToLocalTime();

                        var text = $"""
                                    ‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!

                                    üìÑ –ö–æ–¥: {result.Code}
                                    üí≥ –°—É–º–º–∞: {result.Amount:F2} –≥—Ä–Ω
                                    üè¶ –ë–∞–Ω–∫: {Enum.GetName((BankType)result.BankId)}
                                    üìÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω: {checkedAt:dd.MM.yyyy HH:mm:ss}
                                    üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –±–∞–Ω–∫–µ]({result.Link})
                                     
                                    –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ @slabidker
                                    """;

                        await _botClient.SendMessage(
                            chatId,
                            text,
                            parseMode: ParseMode.Markdown
                        );
                    }
                }
                catch (InvalidReceiptException)
                {
                    await _botClient.SendMessage(
                        chatId,
                        "‚ùå –ß–µ–∫ –ù–ï–í–ê–õ–ò–î–ù–´–ô",
                        parseMode: ParseMode.Markdown
                    );
                }
                catch (RpcException ex)
                {
                    _logger.LogError(ex, "–û—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ä–≤–∏—Å–∞");
                    await _botClient.SendMessage(chatId,
                        $"‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞: {ex.Status.Detail}. \n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ: @slabidker");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞");
                    await _botClient.SendMessage(chatId,
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ–∫–∞. \n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ: @slabidker");
                }
                finally
                {
                    _waitingForReceipt.Remove(chatId);
                }

                return;
            }

            // –ü—Ä–æ—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await _botClient.SendMessage(chatId, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ /start –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º");
        }
    }
}