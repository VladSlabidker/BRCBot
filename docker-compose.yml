services:
  # ==========================
  # SQL Server
  # ==========================
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    restart: always
    environment:
      SA_PASSWORD: ${SA_PASSWORD}
      ACCEPT_EULA: "Y"
    volumes:
      - sql_data:/var/opt/mssql
    networks:
      - mybot

  # ==========================
  # Redis Cache
  # ==========================
  redis:
    image: redis:7.4
    container_name: redis
    restart: always
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD:-}"]
    volumes:
      - redis_data:/data
    networks:
      - mybot

  # ==========================
  # RabbitMQ + Management UI
  # ==========================
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    ports:
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - mybot

  # ==========================
  # Validation Service (.NET)
  # ==========================
  validationservice:
    build:
      context: .
      dockerfile: ./ValidationService/Dockerfile
      args:
        PROJECT_NAME: ValidationService
    container_name: validationservice
    restart: always
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      SqlExpressConfig__DataSource: sqlserver
      SqlExpressConfig__InitialCatalog: ReceiptBotDev
      SqlExpressConfig__IntegratedSecurity: "false"
      SqlExpressConfig__TrustServerCertificate: "true"
      SqlExpressConfig__Password: ${SA_PASSWORD}
      ProxyConfig__Server: ${PROXY_SERVER}
      ProxyConfig__User: ${PROXY_USER}
      ProxyConfig__Pass: ${PROXY_PASS}
      UriConfig__OcrService: http://ocrservice:8080
      RedisConfig__Host: redis
      RedisConfig__Port: 6379
      RedisConfig__Password: ${REDIS_PASSWORD:-}
    depends_on:
      - sqlserver
      - ocrservice
    networks:
      - mybot

  # ==========================
  # Telegram Gateway (.NET)
  # ==========================
  telegramgateway:
    build:
      context: .
      dockerfile: ./Telegram.Gateway/Dockerfile
      args:
        PROJECT_NAME: Telegram.Gateway
    container_name: telegramgateway
    ports:
      - "8080:8080"
    restart: always
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      TELEGRAM__BOTTOKEN: ${TELEGRAM__BOTTOKEN}
      ASPNETCORE_URLS: http://+:8080
      Storefront__BaseUrl: http://storefront:80
    networks:
      - mybot

  # ==========================
  # Storefront (.NET)
  # ==========================
  storefront:
    build:
      context: .
      dockerfile: ./Storefront/Dockerfile
      args:
        PROJECT_NAME: Storefront
    container_name: storefront
    restart: always
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ASPNETCORE_URLS: http://+:80
      UriConfig__OcrService: http://ocrservice:8080
      UriConfig__ValidationService: http://validationservice:8080
    depends_on:
      - ocrservice
      - validationservice
    networks:
      - mybot

  # ==========================
  # OCR Service (.NET)
  # ==========================
  ocrservice:
    build:
      context: .
      dockerfile: ./OcrService/Dockerfile
      args:
        PROJECT_NAME: OcrService
    container_name: ocrservice
    restart: always
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      RabbitMqConfig__HostName: rabbitmq
      RabbitMqConfig__Port: 5672
      RabbitMqConfig__UserName: ${RABBITMQ_USER}
      RabbitMqConfig__Password: ${RABBITMQ_PASS}
      RabbitMqConfig__RequestQueueName: ocr_requests
      RabbitMqConfig__ResponseQueueName: ocr_response
    depends_on:
      - rabbitmq
    networks:
      - mybot

  # ==========================
  # Data.SQL (.NET)
  # ==========================
  data_sql:
    build:
      context: .
      dockerfile: ./Data.SQL/Dockerfile
      args:
        PROJECT_NAME: Data.SQL
    container_name: data_sql
    restart: always
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      SqlExpressConfig__DataSource: sqlserver
      SqlExpressConfig__InitialCatalog: ReceiptBotDev
      SqlExpressConfig__IntegratedSecurity: "false"
      SqlExpressConfig__TrustServerCertificate: "true"
      SqlExpressConfig__Password: ${SA_PASSWORD}
    depends_on:
      - sqlserver
    networks:
      - mybot

  # ==========================
  # Data.Cache (.NET)
  # ==========================
  data_cache:
    build:
      context: .
      dockerfile: ./Data.Cache/Dockerfile
      args:
        PROJECT_NAME: Data.Cache
    container_name: data_cache
    restart: always
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      RedisConfig__Host: redis
      RedisConfig__Port: 6379
      RedisConfig__Password: ${REDIS_PASSWORD:-}
    depends_on:
      - redis
    networks:
      - mybot

  # ==========================
  # Python Paddle OCR Service
  # ==========================
  paddleocrservice:
    build:
      context: .
      dockerfile: ./PaddleOcrService/Dockerfile
    container_name: paddleocrservice
    restart: always
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
    depends_on:
      - rabbitmq
    networks:
      - mybot

  # =========================
  # Nginx + HTTPS (Let's Encrypt)
  # =========================
  init-certbot:
    image: certbot/certbot
    container_name: init-certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    entrypoint: >
      sh -c "if [ ! -f /etc/letsencrypt/live/${DOMAIN}/fullchain.pem ];
      then certbot certonly --webroot -w /var/www/certbot
      --email ${CERTBOT_EMAIL} -d ${DOMAIN} --agree-tos --non-interactive;
      fi"
    networks:
      - mybot

  certbot:
    image: certbot/certbot
    container_name: certbot
    restart: unless-stopped
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    entrypoint: >
      sh -c "trap exit TERM; while :; do certbot renew --quiet && nginx -s reload; sleep 12h & wait $${!}; done;"
    networks:
      - mybot

  nginx:
    image: nginx:stable
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    depends_on:
      - init-certbot
      - telegramgateway
      - storefront
    networks:
      - mybot


volumes:
  sql_data:
  redis_data:
  rabbitmq_data:

networks:
  mybot:
    driver: bridge
