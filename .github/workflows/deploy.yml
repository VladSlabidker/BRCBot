name: Deploy to VPS

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Клонируем код проекта
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Деплой на VPS по SSH
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script_stop: true
          script: |
            cd ~/mybot

            # Подтягиваем последние изменения
            git reset --hard
            git pull origin main

            # Генерируем .env из GitHub Secrets
            cat > .env <<EOL
            SA_PASSWORD=${{ secrets.SA_PASSWORD }}
            RABBITMQ_USER=${{ secrets.RABBITMQ_USER }}
            RABBITMQ_PASS=${{ secrets.RABBITMQ_PASS }}
            TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}
            DOMAIN=${{ secrets.DOMAIN }}
            REDIS_HOST=redis
            REDIS_PORT=6379
            RABBITMQ_HOST=rabbitmq
            RABBITMQ_PORT=5672
            DB_CONNECTION_STRING=Server=sqlserver,1433;User Id=sa;Password=${{ secrets.SA_PASSWORD }};TrustServerCertificate=true;Encrypt=false;
            EOL

            # Пересобираем контейнеры с .env
            docker compose pull || true
            docker compose up -d --build

            # Чистим старые образы
            docker image prune -f

            # Обновляем и пересобираем контейнеры
            docker compose pull || true
            docker compose up -d --build

            # Чистим старые неиспользуемые образы
            docker image prune -f

      # 3. Автоматическая установка Telegram Webhook после деплоя
      - name: Set Telegram Webhook
        run: |
          curl -X POST \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/setWebhook" \
            -d "url=https://${{ secrets.DOMAIN }}/api/webhook"
